// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msgA.proto

#ifndef PROTOBUF_msgA_2eproto__INCLUDED
#define PROTOBUF_msgA_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_msgA_2eproto();
void protobuf_AssignDesc_msgA_2eproto();
void protobuf_ShutdownFile_msgA_2eproto();

class MessageA;

// ===================================================================

class MessageA : public ::google::protobuf::MessageLite {
 public:
  MessageA();
  virtual ~MessageA();

  MessageA(const MessageA& from);

  inline MessageA& operator=(const MessageA& from) {
    CopyFrom(from);
    return *this;
  }

  static const MessageA& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const MessageA* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(MessageA* other);

  // implements Message ----------------------------------------------

  MessageA* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const MessageA& from);
  void MergeFrom(const MessageA& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 f1 = 1;
  inline bool has_f1() const;
  inline void clear_f1();
  static const int kF1FieldNumber = 1;
  inline ::google::protobuf::int32 f1() const;
  inline void set_f1(::google::protobuf::int32 value);

  // required string f2 = 2;
  inline bool has_f2() const;
  inline void clear_f2();
  static const int kF2FieldNumber = 2;
  inline const ::std::string& f2() const;
  inline void set_f2(const ::std::string& value);
  inline void set_f2(const char* value);
  inline void set_f2(const char* value, size_t size);
  inline ::std::string* mutable_f2();
  inline ::std::string* release_f2();
  inline void set_allocated_f2(::std::string* f2);

  // optional string f3 = 3;
  inline bool has_f3() const;
  inline void clear_f3();
  static const int kF3FieldNumber = 3;
  inline const ::std::string& f3() const;
  inline void set_f3(const ::std::string& value);
  inline void set_f3(const char* value);
  inline void set_f3(const char* value, size_t size);
  inline ::std::string* mutable_f3();
  inline ::std::string* release_f3();
  inline void set_allocated_f3(::std::string* f3);

  // optional int32 f4 = 4;
  inline bool has_f4() const;
  inline void clear_f4();
  static const int kF4FieldNumber = 4;
  inline ::google::protobuf::int32 f4() const;
  inline void set_f4(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MessageA)
 private:
  inline void set_has_f1();
  inline void clear_has_f1();
  inline void set_has_f2();
  inline void clear_has_f2();
  inline void set_has_f3();
  inline void clear_has_f3();
  inline void set_has_f4();
  inline void clear_has_f4();

  ::std::string* f2_;
  ::google::protobuf::int32 f1_;
  ::google::protobuf::int32 f4_;
  ::std::string* f3_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_msgA_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_msgA_2eproto();
  #endif
  friend void protobuf_AssignDesc_msgA_2eproto();
  friend void protobuf_ShutdownFile_msgA_2eproto();

  void InitAsDefaultInstance();
  static MessageA* default_instance_;
};
// ===================================================================


// ===================================================================

// MessageA

// required int32 f1 = 1;
inline bool MessageA::has_f1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessageA::set_has_f1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MessageA::clear_has_f1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MessageA::clear_f1() {
  f1_ = 0;
  clear_has_f1();
}
inline ::google::protobuf::int32 MessageA::f1() const {
  return f1_;
}
inline void MessageA::set_f1(::google::protobuf::int32 value) {
  set_has_f1();
  f1_ = value;
}

// required string f2 = 2;
inline bool MessageA::has_f2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MessageA::set_has_f2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MessageA::clear_has_f2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MessageA::clear_f2() {
  if (f2_ != &::google::protobuf::internal::kEmptyString) {
    f2_->clear();
  }
  clear_has_f2();
}
inline const ::std::string& MessageA::f2() const {
  return *f2_;
}
inline void MessageA::set_f2(const ::std::string& value) {
  set_has_f2();
  if (f2_ == &::google::protobuf::internal::kEmptyString) {
    f2_ = new ::std::string;
  }
  f2_->assign(value);
}
inline void MessageA::set_f2(const char* value) {
  set_has_f2();
  if (f2_ == &::google::protobuf::internal::kEmptyString) {
    f2_ = new ::std::string;
  }
  f2_->assign(value);
}
inline void MessageA::set_f2(const char* value, size_t size) {
  set_has_f2();
  if (f2_ == &::google::protobuf::internal::kEmptyString) {
    f2_ = new ::std::string;
  }
  f2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MessageA::mutable_f2() {
  set_has_f2();
  if (f2_ == &::google::protobuf::internal::kEmptyString) {
    f2_ = new ::std::string;
  }
  return f2_;
}
inline ::std::string* MessageA::release_f2() {
  clear_has_f2();
  if (f2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = f2_;
    f2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MessageA::set_allocated_f2(::std::string* f2) {
  if (f2_ != &::google::protobuf::internal::kEmptyString) {
    delete f2_;
  }
  if (f2) {
    set_has_f2();
    f2_ = f2;
  } else {
    clear_has_f2();
    f2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string f3 = 3;
inline bool MessageA::has_f3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MessageA::set_has_f3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MessageA::clear_has_f3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MessageA::clear_f3() {
  if (f3_ != &::google::protobuf::internal::kEmptyString) {
    f3_->clear();
  }
  clear_has_f3();
}
inline const ::std::string& MessageA::f3() const {
  return *f3_;
}
inline void MessageA::set_f3(const ::std::string& value) {
  set_has_f3();
  if (f3_ == &::google::protobuf::internal::kEmptyString) {
    f3_ = new ::std::string;
  }
  f3_->assign(value);
}
inline void MessageA::set_f3(const char* value) {
  set_has_f3();
  if (f3_ == &::google::protobuf::internal::kEmptyString) {
    f3_ = new ::std::string;
  }
  f3_->assign(value);
}
inline void MessageA::set_f3(const char* value, size_t size) {
  set_has_f3();
  if (f3_ == &::google::protobuf::internal::kEmptyString) {
    f3_ = new ::std::string;
  }
  f3_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MessageA::mutable_f3() {
  set_has_f3();
  if (f3_ == &::google::protobuf::internal::kEmptyString) {
    f3_ = new ::std::string;
  }
  return f3_;
}
inline ::std::string* MessageA::release_f3() {
  clear_has_f3();
  if (f3_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = f3_;
    f3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MessageA::set_allocated_f3(::std::string* f3) {
  if (f3_ != &::google::protobuf::internal::kEmptyString) {
    delete f3_;
  }
  if (f3) {
    set_has_f3();
    f3_ = f3;
  } else {
    clear_has_f3();
    f3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 f4 = 4;
inline bool MessageA::has_f4() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MessageA::set_has_f4() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MessageA::clear_has_f4() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MessageA::clear_f4() {
  f4_ = 0;
  clear_has_f4();
}
inline ::google::protobuf::int32 MessageA::f4() const {
  return f4_;
}
inline void MessageA::set_f4(::google::protobuf::int32 value) {
  set_has_f4();
  f4_ = value;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_msgA_2eproto__INCLUDED
