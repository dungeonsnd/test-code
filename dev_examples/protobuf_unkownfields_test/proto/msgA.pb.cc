// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msgA.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msgA.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_msgA_2eproto() {
  delete MessageA::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_msgA_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_msgA_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  MessageA::default_instance_ = new MessageA();
  MessageA::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msgA_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_msgA_2eproto_once_);
void protobuf_AddDesc_msgA_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_msgA_2eproto_once_,
                 &protobuf_AddDesc_msgA_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msgA_2eproto {
  StaticDescriptorInitializer_msgA_2eproto() {
    protobuf_AddDesc_msgA_2eproto();
  }
} static_descriptor_initializer_msgA_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int MessageA::kF1FieldNumber;
const int MessageA::kF2FieldNumber;
const int MessageA::kF3FieldNumber;
const int MessageA::kF4FieldNumber;
#endif  // !_MSC_VER

MessageA::MessageA()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MessageA::InitAsDefaultInstance() {
}

MessageA::MessageA(const MessageA& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MessageA::SharedCtor() {
  _cached_size_ = 0;
  f1_ = 0;
  f2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  f3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  f4_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageA::~MessageA() {
  SharedDtor();
}

void MessageA::SharedDtor() {
  if (f2_ != &::google::protobuf::internal::kEmptyString) {
    delete f2_;
  }
  if (f3_ != &::google::protobuf::internal::kEmptyString) {
    delete f3_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MessageA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MessageA& MessageA::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_msgA_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_msgA_2eproto();
#endif
  return *default_instance_;
}

MessageA* MessageA::default_instance_ = NULL;

MessageA* MessageA::New() const {
  return new MessageA;
}

void MessageA::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    f1_ = 0;
    if (has_f2()) {
      if (f2_ != &::google::protobuf::internal::kEmptyString) {
        f2_->clear();
      }
    }
    if (has_f3()) {
      if (f3_ != &::google::protobuf::internal::kEmptyString) {
        f3_->clear();
      }
    }
    f4_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool MessageA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 f1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f1_)));
          set_has_f1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_f2;
        break;
      }

      // required string f2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_f2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_f3;
        break;
      }

      // optional string f3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_f3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f3()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_f4;
        break;
      }

      // optional int32 f4 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_f4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f4_)));
          set_has_f4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MessageA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 f1 = 1;
  if (has_f1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->f1(), output);
  }

  // required string f2 = 2;
  if (has_f2()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->f2(), output);
  }

  // optional string f3 = 3;
  if (has_f3()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->f3(), output);
  }

  // optional int32 f4 = 4;
  if (has_f4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->f4(), output);
  }

}

int MessageA::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 f1 = 1;
    if (has_f1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f1());
    }

    // required string f2 = 2;
    if (has_f2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f2());
    }

    // optional string f3 = 3;
    if (has_f3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f3());
    }

    // optional int32 f4 = 4;
    if (has_f4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f4());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageA::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MessageA*>(&from));
}

void MessageA::MergeFrom(const MessageA& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f1()) {
      set_f1(from.f1());
    }
    if (from.has_f2()) {
      set_f2(from.f2());
    }
    if (from.has_f3()) {
      set_f3(from.f3());
    }
    if (from.has_f4()) {
      set_f4(from.f4());
    }
  }
}

void MessageA::CopyFrom(const MessageA& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageA::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MessageA::Swap(MessageA* other) {
  if (other != this) {
    std::swap(f1_, other->f1_);
    std::swap(f2_, other->f2_);
    std::swap(f3_, other->f3_);
    std::swap(f4_, other->f4_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MessageA::GetTypeName() const {
  return "MessageA";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
