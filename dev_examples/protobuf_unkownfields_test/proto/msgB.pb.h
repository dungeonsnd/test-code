// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msgB.proto

#ifndef PROTOBUF_msgB_2eproto__INCLUDED
#define PROTOBUF_msgB_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_msgB_2eproto();
void protobuf_AssignDesc_msgB_2eproto();
void protobuf_ShutdownFile_msgB_2eproto();

class MessageB;

// ===================================================================

class MessageB : public ::google::protobuf::Message {
 public:
  MessageB();
  virtual ~MessageB();

  MessageB(const MessageB& from);

  inline MessageB& operator=(const MessageB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageB& default_instance();

  void Swap(MessageB* other);

  // implements Message ----------------------------------------------

  MessageB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageB& from);
  void MergeFrom(const MessageB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 f1 = 1;
  inline bool has_f1() const;
  inline void clear_f1();
  static const int kF1FieldNumber = 1;
  inline ::google::protobuf::int32 f1() const;
  inline void set_f1(::google::protobuf::int32 value);

  // required string f2 = 2;
  inline bool has_f2() const;
  inline void clear_f2();
  static const int kF2FieldNumber = 2;
  inline const ::std::string& f2() const;
  inline void set_f2(const ::std::string& value);
  inline void set_f2(const char* value);
  inline void set_f2(const char* value, size_t size);
  inline ::std::string* mutable_f2();
  inline ::std::string* release_f2();
  inline void set_allocated_f2(::std::string* f2);

  // @@protoc_insertion_point(class_scope:MessageB)
 private:
  inline void set_has_f1();
  inline void clear_has_f1();
  inline void set_has_f2();
  inline void clear_has_f2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* f2_;
  ::google::protobuf::int32 f1_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_msgB_2eproto();
  friend void protobuf_AssignDesc_msgB_2eproto();
  friend void protobuf_ShutdownFile_msgB_2eproto();

  void InitAsDefaultInstance();
  static MessageB* default_instance_;
};
// ===================================================================


// ===================================================================

// MessageB

// required int32 f1 = 1;
inline bool MessageB::has_f1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessageB::set_has_f1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MessageB::clear_has_f1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MessageB::clear_f1() {
  f1_ = 0;
  clear_has_f1();
}
inline ::google::protobuf::int32 MessageB::f1() const {
  return f1_;
}
inline void MessageB::set_f1(::google::protobuf::int32 value) {
  set_has_f1();
  f1_ = value;
}

// required string f2 = 2;
inline bool MessageB::has_f2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MessageB::set_has_f2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MessageB::clear_has_f2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MessageB::clear_f2() {
  if (f2_ != &::google::protobuf::internal::kEmptyString) {
    f2_->clear();
  }
  clear_has_f2();
}
inline const ::std::string& MessageB::f2() const {
  return *f2_;
}
inline void MessageB::set_f2(const ::std::string& value) {
  set_has_f2();
  if (f2_ == &::google::protobuf::internal::kEmptyString) {
    f2_ = new ::std::string;
  }
  f2_->assign(value);
}
inline void MessageB::set_f2(const char* value) {
  set_has_f2();
  if (f2_ == &::google::protobuf::internal::kEmptyString) {
    f2_ = new ::std::string;
  }
  f2_->assign(value);
}
inline void MessageB::set_f2(const char* value, size_t size) {
  set_has_f2();
  if (f2_ == &::google::protobuf::internal::kEmptyString) {
    f2_ = new ::std::string;
  }
  f2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MessageB::mutable_f2() {
  set_has_f2();
  if (f2_ == &::google::protobuf::internal::kEmptyString) {
    f2_ = new ::std::string;
  }
  return f2_;
}
inline ::std::string* MessageB::release_f2() {
  clear_has_f2();
  if (f2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = f2_;
    f2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MessageB::set_allocated_f2(::std::string* f2) {
  if (f2_ != &::google::protobuf::internal::kEmptyString) {
    delete f2_;
  }
  if (f2) {
    set_has_f2();
    f2_ = f2;
  } else {
    clear_has_f2();
    f2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_msgB_2eproto__INCLUDED
